name: Release

on:
  push:
    tags:
      - 'release-v*'

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set TAG_VERSION
        run: |
          TAG_VERSION=${{ github.ref }} 
          TAG_VERSION=${TAG_VERSION#refs/tags/release-}
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Create tar.gz
        run: |
          echo "hello_world_console_app/target/*.jar :"
          ls -l hello_world_console_app/target/*.jar
          
          echo "hello_world_console_app/target/lib :"
          ls -l hello_world_console_app/target/lib

          cd hello_world_console_app/target
          tar -czvf ../../hello_world_java-${{ env.TAG_VERSION }}.tar.gz hello_world_console_app*.jar lib
          cd ../..

      - name: Install GitHub CLI
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key 23F3D4EA75716059
          sudo apt-add-repository 'deb [arch=amd64] https://cli.github.com/packages focal main'
          sudo apt update
          sudo apt install gh

      - name: Set up GitHub CLI
        run: |
          mkdir -p ~/.config/gh
          echo "github.com:" > ~/.config/gh/hosts.yml
          echo "  oauth_token: ${{ secrets.GITHUB_TOKEN }}" >> ~/.config/gh/hosts.yml

      - name: Get milestone number
        run: |
          MILESTONE_NUMBER=$(gh api repos/${{ github.repository }}/milestones --jq ".[] | select(.title==\"${{ env.TAG_VERSION }}\") | .number")
          echo "MILESTONE_NUMBER=${MILESTONE_NUMBER}" >> $GITHUB_ENV

      - name: Get issues for the milestone
        run: |
          if [ -n "${{ env.MILESTONE_NUMBER }}" ]; then
            gh api repos/${{ github.repository }}/issues?milestone=${{ env.MILESTONE_NUMBER }}&state=closed > issues.json
            jq '[.[] | select(.state=="closed" and (any(.labels[]; .name=="duplicate" or .name=="invalid" or .name=="wontfix") | not))]' issues.json > filtered_issues.json
            mv filtered_issues.json issues.json
          else
            echo "[]" > issues.json
          fi

      - name: Create individual release notes
        run: |
          echo "## ${{ env.TAG_VERSION }} ($(date +%Y-%m-%d))" > _release-notes/${{ env.TAG_VERSION }}.md
          echo "" >> _release-notes/${{ env.TAG_VERSION }}.md
          if [ $(jq length issues.json) -eq 0 ]; then
            echo "- 해당 릴리즈와 관련된 이슈가 없습니다." >> _release-notes/${{ env.TAG_VERSION }}.md
          else
            jq -r '.[] | "- Issue #\(.number): \(.title)"' issues.json >> _release-notes/${{ env.TAG_VERSION }}.md
          fi

      - name: Commit and push release notes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch origin main:main
          git checkout main
          git add _release-notes/${{ env.TAG_VERSION }}.md
          if [[ $(git status --porcelain) ]]; then git commit -m "Add release notes for version ${{ env.TAG_VERSION }}"; fi
          git push origin main

      - name: Create combined release notes
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "# '${REPO_NAME}' Release Notes" > RELEASES_NOTES.md
          echo "" >> RELEASES_NOTES.md
          find _release-notes -name "*.md" -print0 | \
          sort -zrV | \
          xargs -0 -I{} sh -c 'cat {}; echo ""' >> RELEASES_NOTES.md

      - name: Create Release
        run: |
          gh release create ${{ github.ref }} \
            --title "Release ${{ env.TAG_VERSION }}" \
            --notes-file _release-notes/${{ env.TAG_VERSION }}.md \
            --repo ${{ github.repository }} \
            --target ${{ github.sha }}

      - name: Upload Release Asset
        run: |
          gh release upload release-${{ env.TAG_VERSION }} \
            ./hello_world_java-${{ env.TAG_VERSION }}.tar.gz \
            --repo ${{ github.repository }}

      - name: Upload Combined Release Notes
        run: |
          gh release upload release-${{ env.TAG_VERSION }} \
            RELEASES_NOTES.md \
            --repo ${{ github.repository }}
