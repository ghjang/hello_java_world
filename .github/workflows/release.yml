name: Release

on:
  push:
    tags:
      - 'release-v*'

jobs:
  build:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/${{ github.repository }}/alpine-3.19-for-java17-build:3.19-latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # `actions/checkout@v2` 액션은 기본적으로 Git 저장소의 `.git` 디렉토리를 체크아웃하지 않는다.
      # 그러나 `git config --local` 명령을 사용하려면 `.git` 디렉토리가 필요하다. 따라서 `fetch-depth`
      # 옵션을 `1`로 설정하여 최근 커밋과 `.git` 디렉토리를 체크아웃하도록 한다. 도커 컨테이너에서 빌드를
      # 할때 필요한 옵션 설정이다. 도커 컨테이너에서 실행하지 않을때는 액션의 러너에서 자동으로 메타정보로
      # `.git` 정보를 가져오기 때문에 `fetch-depth` 옵션을 설정하지 않아도 된다.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set TAG_VERSION
        run: |
          TAG_VERSION=${{ github.ref }} 
          TAG_VERSION=${TAG_VERSION#refs/tags/release-}
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV

      - name: Build with Maven
        run: |
          cd projects
          mvn -B package --file pom.xml

      # 참고로 각 step은 별도의 쉘에서 실행된다. 따라서 이전 step에서 'cd' 명령을 사용하여 디렉토리를
      # 변경하더라도 다음 step에서는 이전 step에서 변경한 디렉토리로 이동되지 않는다.
      - name: Create tar.gz
        run: |
          cd projects

          echo "pwd: $(pwd)"

          echo "hello_world_console_app/target :"
          ls -l hello_world_console_app/target

          echo "hello_world_console_app/target/*.jar :"
          ls -l hello_world_console_app/target/*.jar
          
          echo "hello_world_console_app/target/lib :"
          ls -l hello_world_console_app/target/lib

          cd hello_world_console_app/target
          tar -czvf ../../../hello_world_java-${{ env.TAG_VERSION }}.tar.gz hello_world_console_app*.jar lib
          cd ../../..

      - name: Set up GitHub CLI
        run: |
          mkdir -p ~/.config/gh
          echo "github.com:" > ~/.config/gh/hosts.yml
          echo "  oauth_token: ${{ secrets.GITHUB_TOKEN }}" >> ~/.config/gh/hosts.yml

      - name: Get milestone number
        run: |
          MILESTONE_NUMBER=$(gh api repos/${{ github.repository }}/milestones --jq ".[] | select(.title==\"${{ env.TAG_VERSION }}\") | .number")
          echo "MILESTONE_NUMBER=${MILESTONE_NUMBER}" >> $GITHUB_ENV

      - name: Get closed issues for the milestone
        run: |
          if [ -n "${{ env.MILESTONE_NUMBER }}" ]; then
            ISSUES=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/repos/${{ github.repository }}/issues?milestone=${{ env.MILESTONE_NUMBER }}&state=closed")
            echo "$ISSUES" > closed_issues.txt
            echo "ISSUES value:"
            cat closed_issues.txt
            if [ "$ISSUES" != "null" ] && [ "$ISSUES" != "[]" ] && [ "$ISSUES" != "[\n]" ] && [ "$ISSUES" != "[\n\n]" ]; then
              ALL_CLOSED_ISSUE_COUNT=$(jq length closed_issues.txt)
              echo "해당 릴리즈와 관련된 closed 상태의 모든 이슈가 $ALL_CLOSED_ISSUE_COUNT개 있습니다."
              echo $ISSUES | jq '[.[] | select(any(.labels[]; .name=="invalid" or .name=="duplicate" or .name=="wontfix") | not)]' > issues.json
              FILTERED_CLOSED_ISSUE_COUNT=$(jq length issues.json)
              echo "필터링된 closed 상태의 이슈가 $FILTERED_CLOSED_ISSUE_COUNT개 있습니다."
            else
              echo "해당 릴리즈와 관련된 이슈가 없습니다."
              echo "[]" > issues.json
            fi
          else
            echo "해당 릴리즈와 관련된 마일스톤이 없습니다."
            echo "[]" > issues.json
          fi

      - name: Create individual release notes
        run: |
          echo "## ${{ env.TAG_VERSION }} ($(date +%Y-%m-%d))" > _release-notes/${{ env.TAG_VERSION }}.md
          echo "" >> _release-notes/${{ env.TAG_VERSION }}_TMP.md
          if [ $(jq length issues.json) -eq 0 ]; then
            echo "- 해당 릴리즈와 관련된 정상 처리된 이슈가 없습니다." >> _release-notes/${{ env.TAG_VERSION }}_TMP.md
          else
            jq -r '.[] | "- Issue #\(.number): \(.title)"' issues.json >> _release-notes/${{ env.TAG_VERSION }}_TMP.md
          fi

      - name: Commit and push release notes
        run: |
          echo "pwd: $(pwd)"
          ls -al

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch origin main:main
          git checkout main
          mv _release-notes/${{ env.TAG_VERSION }}_TMP.md _release-notes/${{ env.TAG_VERSION }}.md
          git add _release-notes/${{ env.TAG_VERSION }}.md
          if [[ $(git diff --name-only --cached) ]]; then git commit -m "Add release notes for version ${{ env.TAG_VERSION }}"; fi
          git push origin main

      - name: Create combined release notes
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "# '${REPO_NAME}' Release Notes" > RELEASES_NOTES.md
          echo "" >> RELEASES_NOTES.md
          find _release-notes -name "*.md" -print0 | \
          sort -zrV | \
          xargs -0 -I{} sh -c 'cat {}; echo ""' >> RELEASES_NOTES.md

      - name: Create Release
        run: |
          gh release create ${{ github.ref }} \
            --title "Release ${{ env.TAG_VERSION }}" \
            --notes-file _release-notes/${{ env.TAG_VERSION }}.md \
            --repo ${{ github.repository }} \
            --target ${{ github.sha }}

      - name: Upload Release Asset
        run: |
          gh release upload release-${{ env.TAG_VERSION }} \
            ./hello_world_java-${{ env.TAG_VERSION }}.tar.gz \
            --repo ${{ github.repository }}

      - name: Upload Combined Release Notes
        run: |
          gh release upload release-${{ env.TAG_VERSION }} \
            RELEASES_NOTES.md \
            --repo ${{ github.repository }}
