name: Release

on:
  push:
    tags:
      # 'release-v1.0.0'과 같은 형태의 태그가 푸시되면 'build' job을 실행한다.
      - 'release-v*'

jobs:
  build:
    # 'build' job은 'ubuntu-latest' job 러너에서 실행된다.
    runs-on: ubuntu-latest

    # 'runs-on'에 지정된 러너에서 다음에 지정된 도커 이미지를 사용해서 컨테이너를 실행한다. 'job' 레벨에서 컨테이너를
    # 실행한 것으로 모든 'step'이 동일한 컨테이너에서 실행된다.
    #
    # NOTE: 사용하는 'Alpine Linux' 도커 컨테이너에 설치된 shell은 'ash'쉘이다. 컨테이너내에서 '/bin/sh'를 실행하면
    #       'ash'가 실행된다. 따라서 아래 각 step에서 사용되는 기본 쉘은 'ash'라는 것에 유의해야 한다.
    container: 
      # 'JDK 17, Maven'등의 빌드 환경을 제공하는 도커 컨테이너를 사용한다.
      image: ghcr.io/${{ github.repository_owner }}/dockers/alpine-3.19-with-jdk17-build-env:3.19-latest

      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # NOTE: 각 step은 별도의 쉘에서 실행된다. 따라서 이전 step에서 'cd' 명령을 사용하여 디렉토리를 변경하더라도 다음
    #       step에서는 이전 step에서 변경한 디렉토리로 이동되지 않는다. 또한 한 step에서 정의된 환경변수의 경우도 후속
    #       step에서 사용할 수 없다.
    steps:
      # 'build' job을 트리거한 'release-v1.0.0'과 같은 형태의 태그를 'github.workspace' 위치에 클론한다.
      # 각 step의 쉘의 기본 작업 디렉토리는 'github.workspace'이다. 결과적으로 이 소스 코드 체크아웃 step 이후의
      # 모든 step은 git 저장소 루트 디렉토리에서 실행되게 된다.
      - name: Checkout code
        uses: actions/checkout@v2

      # 후속 step들에서 사용할 환경변수를 설정한다. 후속 step에서 사용할 환경변수는 'GITHUB_ENV' 환경변수가 가리키는
      # 파일에 'key=value' 형태의 문자열값을 덧붙여서 전달 가능하다. 이렇게 파일을 통해서 정의된 환경변수는 후속 step의
      # 코드에서'${{ env.환경변수명 }}' 형태로 참조할 수 있다.
      - name: Set environment variables
        run: |
          TAG_VERSION=${{ github.ref }} 
          TAG_VERSION=${TAG_VERSION#refs/tags/release-}
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV

          TAG_NAME=${{ github.ref }}
          TAG_NAME=${TAG_NAME#refs/tags/}
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

          BUILD_OUTPUT_FILE=hello_world_java-${TAG_VERSION}.tar.gz
          echo "BUILD_OUTPUT_FILE=${BUILD_OUTPUT_FILE}" >> $GITHUB_ENV

          cat $GITHUB_ENV

      - name: Build with Maven
        run: |
          cd projects
          mvn -B package --file pom.xml

      # NOTE: 쉘 스크립트를 실행하거나 도커 컨테이너를 사용하도록 구성된 커스텀 액션의 경우 'GITHUB_REPOSITORY'등과 같은
      #       워크플로우 job에 정의된 기본 환경변수와 'TAG_VERSION' 등의 사용자가 직접 설정한 환경변수값은 자동으로 전달된다.
      #       하지만 'GITHUB_TOKEN' 환경변수는 보안상의 이유로 자동으로 전달되지 않는다. 따라서 커스텀 액션에서 사용이 필요한
      #       경우에 'GITHUB_TOKEN' 환경변수 값을 명시적으로 전달해야 한다.
      #
      #       워크플로우 job에 정의된 기본 환경변수와 사용자 정의된 환경변수를 '.yml' 파일 자체에서 참조하는 문법은 다음과 같다:
      #         - ${{ github.<환경변수명> }} : 워크플로우 job에 정의된 기본 환경변수 참조. ex.> ${{ github.repository }}
      #         - ${{ env.<환경변수명> }} : 사용자가 직접 정의한 환경변수 참조. ex.> ${{ env.TAG_VERSION }}
      #
      #       커스텀 액션의 쉘 스크립트나 도커 컨테이너내에서는 전달된 환경변수를 '$<환경변수명>' 형태로 참조할 수 있다:
      #         - $GITHUB_<환경변수명> : 워크플로우 job에 정의된 기본 환경변수 참조. 환경변수명이 '대문자'로 바뀌어 있다.
      #                               ex.> $GITHUB_REPOSITORY
      #         - $<환경변수명> : 사용자가 직접 정의한 환경변수 참조. 'env.'과 같은 접두어는 필요없다.
      #                        ex.> $TAG_VERSION

      # '메이븐'으로 빌드한 결과물을 'tar.gz' 파일로 압축한다.
      - name: Create tar.gz file for release
        uses: ./.github/actions/create-tar-gz
        with:
          buildOutputFile: ${{ env.BUILD_OUTPUT_FILE }}

      # '릴리즈 태그'와 연관된 '마일스톤, 이슈' 정보로부터 '릴리즈 노트'를 자동으로 생성한다.
      - name: Create Release Notes
        uses: ghjang/actions/release-notes/generate@main
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          projectName: Hello Java World!
          releaseVersion: ${{ env.TAG_VERSION }}

      # NOTE: GitHub CLI를 사용하려면 GitHub 저장소 인증 정보가 필요하다. 인증 정보를 전달하는 가장 간단한 방법은
      #       'GH_TOKEN' 환경 변수에 저장소 인증 토큰인 'GITHUB_TOKEN'을 할당한 후에 'gh'등의 명령어를 사용하는 것이다.
      #       GitHub Actions Workflow의 각 step은 별도의 서브 쉘에서 실행되는 것이기 때문에 이 방법을 이용하고자 할 경우
      #       각 스텝별로 'GH_TOKEN' 환경변수를 설정해야하는 번거로움이 있다. 해서 여기서는 'hosts.yml' 파일을 생성하여
      #       GitHub CLI가 사용할 저장소 인증 토큰을 설정하는 방법을 사용하는 'ghjang/actions/set-up-gh-auth-token'
      #       커스텀 액션을 사용했다. 
      - name: Set up GitHub CLI
        uses: ghjang/actions/gh/set-auth-token@main
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        run: |
          gh release create ${{ github.ref }} \
                      --repo ${{ github.repository }} \
                      --target ${{ github.sha }} \
                      --title "Release ${{ env.TAG_VERSION }}" \
                      --notes-file ./_release-notes/${{ env.TAG_VERSION }}.md

      - name: Upload Release Asset
        run: |
          gh release upload ${{ env.TAG_NAME }} \
                      --repo ${{ github.repository }} \
                      ./hello_world_java-${{ env.TAG_VERSION }}.tar.gz

      - name: Upload Combined Release Notes
        run: |
          gh release upload ${{ env.TAG_NAME }} \
                      --repo ${{ github.repository }} \
                      ./RELEASES_NOTES.md
